# -*- coding: utf-8 -*-
"""
/***************************************************************************
 preprocessing_optimization
                                 A QGIS plugin
 preprocessing_optimization
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Moritz
        email                : Moritz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import QgsProject
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, QgsRasterLayer, QgsVectorLayer
from osgeo import ogr
import pickle
#import help functions to keep this program short and readable
import sys
sys.path.append(".")
from .utility_functions import compute_slope, compute_fill_sinks, compute_strahler_order, compute_aspect,\
    compute_channelnetwork_and_drainage_basins, compute_landuse_raster, check_and_convert_dem_crs, \
    compute_organic_matter_content_map, compute_textural_factor_map, compute_soil_structure_class_map,compute_flow_path_length, \
    compute_permeability_class_map, check_and_convert_raster_crs,interpolate_and_resample_raster, compute_r_factor_map, compute_c_factor_map, \
    compute_k_factor_map, compute_ls_factor_map, compute_slopelimited_flow_accumulation, compute_weight_raster, compute_barrier_raster, compute_p_factor_map, \
    compute_rusle, compute_labour_requirements_per_ha, read_tif_as_numpy, compute_k_factor_map_set_under_uncertainty, \
    get_geotransform_context_from_raster,compute_r_factor_map_set_under_uncertainty, compute_labour_requirements_set_under_uncertainty

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .preprocessing_optimization_dialog import preprocessing_optimizationDialog
# Import the code for the NSGA2 optimization performed with the library pymoo
from .optimization_under_uncertainty import run_optimization
# Import the code to compute random realizations from mean and 90% quantiles
from .random_realizations import moving_average_realization, percentage_based_group_realization
import os.path


class preprocessing_optimization:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'preprocessing_optimization_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        #self.dlg = preprocessing_optimizationDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&preprocessing_optimization')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # self.dlg.lineEdit_landuse.clear()
        # self.dlg.pushButton_landuse.clicked.connect(self.select_file)




    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('preprocessing_optimization', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/preprocessing_optimization/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&preprocessing_optimization'),
                action)
            self.iface.removeToolBarIcon(action)



    def select_landuse_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\PILUP Basemap\Amhara_Enerata\Land Use Enerata.shp"
        filter = "shapefile(*.shp)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_landuse.setText(f[0])

    def select_extent_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\PILUP Basemap\Amhara_Enerata\Kebele Boundary Enerata.shp"
        filter = "shapefile(*.shp)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_extent.setText(f[0])

    def select_dem_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_dem.setText(f[0])

    def select_soildepth_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\soil_depth.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_soildepth.setText(f[0])

    def select_clay_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\clay_0_5cm_mean.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_clay.setText(f[0])

    def select_sand_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\sand_0_5cm_mean.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_sand.setText(f[0])

    def select_silt_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\silt_0_5cm_mean.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_silt.setText(f[0])

    def select_clayuncertainty_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\clay_0_5cm_uncertainty.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_siltUncertainty.setText(f[0])

    def select_sanduncertainty_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\sand_0_5cm_uncertainty.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_sandUncertainty.setText(f[0])

    def select_siltuncertainty_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\silt_0_5cm_uncertainty.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_siltUncertainty.setText(f[0])

    def select_demuncertainty_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_demUncertainty.setText(f[0])

    def select_mean_precipitation_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_mean_precipitation.setText(f[0])

    def select_variance_precipitation_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_variance_precipitation.setText(f[0])


    def select_organic_carbon_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\soil_organic_carbon_5_15_cm_mean.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_organic_carbon.setText(f[0])

    def select_organic_carbon_uncertainty_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\soil_organic_carbon_5_15_cm_uncertainty.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_organic_carbon_uncertainty.setText(f[0])

    def select_bulk_density_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\bulk_densitiy_5_15cm_mean.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_bulk_density.setText(f[0])

    def select_bulk_density_uncertainty_file(self):
        qfd = QFileDialog()
        path = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\bulk_densitiy_5_15cm_uncertainty.tif"
        filter = "tif(*.tif)"
        title = "Select file"
        f = QFileDialog.getOpenFileName(qfd, title, path, filter)
        self.dlg.lineEdit_bulk_density_uncertainty.setText(f[0])

    def select_output_directory(self):
        qfd = QFileDialog()
        dirname = QFileDialog.getExistingDirectory( qfd, 'Select a directory', r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data")
        self.dlg.lineEdit_outputdir.setText(dirname)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = preprocessing_optimizationDialog()
            self.dlg.pushButton_landuse.clicked.connect(self.select_landuse_file)
            self.dlg.pushButton_extent.clicked.connect(self.select_extent_file)
            self.dlg.pushButton_dem.clicked.connect(self.select_dem_file)
            self.dlg.pushButton_soildepth.clicked.connect(self.select_soildepth_file)

            self.dlg.pushButton_clay.clicked.connect(self.select_clay_file)
            self.dlg.pushButton_sand.clicked.connect(self.select_sand_file)
            self.dlg.pushButton_silt.clicked.connect(self.select_silt_file)

            self.dlg.pushButton_clayUncertainty.clicked.connect(self.select_clayuncertainty_file)
            self.dlg.pushButton_sandUncertainty.clicked.connect(self.select_sanduncertainty_file)
            self.dlg.pushButton_siltUncertainty.clicked.connect(self.select_siltuncertainty_file)

            self.dlg.pushButton_demUncertainty.clicked.connect(self.select_demuncertainty_file)
            self.dlg.pushButton_mean_precipitation.clicked.connect(self.select_mean_precipitation_file)
            self.dlg.pushButton_variance_precipitation.clicked.connect(self.select_variance_precipitation_file)

            self.dlg.pushButton_organic_carbon.clicked.connect(self.select_organic_carbon_file)
            self.dlg.pushButton_organic_carbonUncertainty.clicked.connect(self.select_organic_carbon_uncertainty_file)

            self.dlg.pushButton_bulk_density.clicked.connect(self.select_bulk_density_file)
            self.dlg.pushButton_bulk_densityUncertainty.clicked.connect(self.select_bulk_density_uncertainty_file)

            self.dlg.pushButton_outputdir.clicked.connect(self.select_output_directory)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            if self.dlg.lineEdit_landuse.text() == '':
                # There must be a fielf called LandUseID defining the Land use types:
                #   Agriculture -> 1
                #   Pasture -> 2
                #   Forest/Plantation Forest -> 3
                #   Urban -> 4
                #   Bushland -> 5
                #   Everything else -> 6

                # Enerata
                # self.dlg.lineEdit_landuse.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\Land Use Enerata.shp')
                # Gumobila:
                self.dlg.lineEdit_landuse.setText(
                    r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\Land_Use_Gumobila.shp')

            if self.dlg.lineEdit_dem.text() == '':
                #self.dlg.lineEdit_dem.setText(r'C:/Users/morit/AppData/Local/Temp/grassdata/mytemploc_utm32n/DEM_Enerata.tif')
                self.dlg.lineEdit_dem.setText(
                    r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila/DEM_Gumobila2.tif')

            if self.dlg.lineEdit_mean_precipitation.text() == '':
                self.dlg.lineEdit_mean_precipitation.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\mean_annual_precipitation.tif')

            if self.dlg.lineEdit_variance_precipitation.text() == '':
                self.dlg.lineEdit_variance_precipitation.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\variance_annual_precipitation.tif')

            if self.dlg.lineEdit_clay.text() == '':
                self.dlg.lineEdit_clay.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\clay_5_15cm_mean.tif')

            if self.dlg.lineEdit_silt.text() == '':
                self.dlg.lineEdit_silt.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\silt_5_15cm_mean.tif')

            if self.dlg.lineEdit_sand.text() == '':
                self.dlg.lineEdit_sand.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\sand_5_15cm_mean.tif')

            if self.dlg.lineEdit_clayUncertainty.text() == '':
                self.dlg.lineEdit_clayUncertainty.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\clay_5_15cm_uncertainty.tif')

            if self.dlg.lineEdit_siltUncertainty.text() == '':
                self.dlg.lineEdit_siltUncertainty.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\silt_5_15cm_uncertainty.tif')

            if self.dlg.lineEdit_sandUncertainty.text() == '':
                self.dlg.lineEdit_sandUncertainty.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\sand_5_15_cm_uncertainty.tif')

            if self.dlg.lineEdit_organic_carbon.text() == '':
                self.dlg.lineEdit_organic_carbon.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\soil_organic_carbon_5_15_cm_mean.tif')

            if self.dlg.lineEdit_organic_carbonUncertainty.text() == '':
                self.dlg.lineEdit_organic_carbonUncertainty.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\soil_organic_carbon_5_15_cm_uncertainty.tif')

            if self.dlg.lineEdit_bulk_density.text() == '':
                self.dlg.lineEdit_bulk_density.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\bulk_density_5_15_cm_mean.tif')

            if self.dlg.lineEdit_bulk_densityUncertainty.text() == '':
                self.dlg.lineEdit_bulk_densityUncertainty.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Soil data\bulk_density_5_15_cm_uncertainty.tif')

            if self.dlg.lineEdit_outputdir.text() == '':
                #self.dlg.lineEdit_outputdir.setText(r'C:/Users/morit/OneDrive - Universität Münster/PhD/Kooperation_GIZ/Data/Optimization_Enerata/Output Enerata')
                self.dlg.lineEdit_outputdir.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila')

            if self.dlg.lineEdit_extent.text() == '':
                #self.dlg.lineEdit_extent.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\Kebele Boundary Enerata.shp')
                self.dlg.lineEdit_extent.setText(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\study_area_gumobila.shp')
            #from .deterministic_benchmark import execute_deterministic_benchmark
            #execute_deterministic_benchmark()

            #from .optimal_number_of_realizations import compute_optimal_number_of_realizations_in_optimization
            #compute_optimal_number_of_realizations_in_optimization()

            # # Here, the computations begin
            # # get coordinate system from land use map and set as default crs. Needs to be metric reference system
            vec_ds = QgsVectorLayer(self.dlg.lineEdit_landuse.text(), "Dem Layer",  "ogr")
            #
            # # convert input dem to metric reference system, if different then project crs
            dem = self.dlg.lineEdit_dem.text()
            #
            # #elevation and watershed related computations
            #slope_percent = compute_slope(dem, self.dlg.lineEdit_outputdir.text())
            # slope_degrees = compute_slope(dem, self.dlg.lineEdit_outputdir.text(), in_percent=False)
            #
            # dem_filled_sinks = compute_fill_sinks(dem, self.dlg.lineEdit_outputdir.text())
            # strahler_order = compute_strahler_order(dem_filled_sinks, self.dlg.lineEdit_outputdir.text())
            # aspect = compute_aspect(dem_filled_sinks, self.dlg.lineEdit_outputdir.text())
            # compute_channelnetwork_and_drainage_basins(dem_filled_sinks,  self.dlg.lineEdit_outputdir.text(), 3)
            #
            # #active_soil_conservation_raster = None
            # #active_soil_conservation_raster = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\active_soil_protection_selected_areas.tif"
            # active_soil_conservation_raster = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\active_soil_protection_all_areas.tif"
            #
            # barrier_raster = compute_barrier_raster(active_soil_conservation_raster, value_protected=1,
            #                                         value_unprotected=0,
            #                                         outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                'conservation_data'))
            # flow_path_length = compute_flow_path_length(dem_filled_sinks, flow_barrier= barrier_raster, outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(), 'watershed_data'))
            # #
            # # #land use related computations
            landuse_raster = compute_landuse_raster(self.dlg.lineEdit_landuse.text(), raster_for_dimensions= dem, outputdir= self.dlg.lineEdit_outputdir.text())
            #
            # mean_precipitation_raster = check_and_convert_raster_crs(vec_ds.crs().toWkt(), self.dlg.lineEdit_mean_precipitation.text(),
            #                                                          os.path.join(self.dlg.lineEdit_outputdir.text(),'precipitation_data'),
            #                                                          'mean_annual_precipitation_reprojected.tif')
            # variance_precipitation_raster = check_and_convert_raster_crs(vec_ds.crs().toWkt(),
            #                                                          self.dlg.lineEdit_variance_precipitation.text(),
            #                                                          os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                       'precipitation_data'),
            #                                                          'variance_annual_precipitation_reprojected.tif')
            #
            mean_clay_content_raster = check_and_convert_raster_crs(vec_ds.crs().toWkt(),
                                                                         self.dlg.lineEdit_clay.text(),
                                                                         os.path.join( self.dlg.lineEdit_outputdir.text(),'soil_data'),
                                                                         'mean_clay_5_15cm_reprojected.tif')
            mean_sand_content_raster = check_and_convert_raster_crs(vec_ds.crs().toWkt(),
                                                                         self.dlg.lineEdit_sand.text(),
                                                                         os.path.join( self.dlg.lineEdit_outputdir.text(),'soil_data'),
                                                                         'mean_sand_5_15cm_reprojected.tif')
            mean_silt_content_raster = check_and_convert_raster_crs(vec_ds.crs().toWkt(),
                                                                         self.dlg.lineEdit_silt.text(),
                                                                         os.path.join( self.dlg.lineEdit_outputdir.text(),'soil_data'),
                                                                         'mean_silt_5_15cm_reprojected.tif')
            #
            #
            #
            # interpolate_precipitation_raster = True
            # if interpolate_precipitation_raster is True:
            #     mean_precipitation_raster= interpolate_and_resample_raster(raster= mean_precipitation_raster,
            #                                                                outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                       'precipitation_data'),
            #                                                                raster_for_dimensions = landuse_raster)
            #     variance_precipitation_raster = interpolate_and_resample_raster(raster= variance_precipitation_raster,
            #                                                                outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                       'precipitation_data'),
            #                                                                raster_for_dimensions = landuse_raster)
            # r_factor_raster = compute_r_factor_map(mean_precipitation_raster,study_area_boundary = self.dlg.lineEdit_extent.text(),outputdir= os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                    'rusle_data'))
            # #
            # textural_factor_raster = compute_textural_factor_map(mean_clay_content_raster,mean_sand_content_raster, mean_silt_content_raster, os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                   'k_factor_data'))
            #
            # organic_matter_content_raster = compute_organic_matter_content_map(self.dlg.lineEdit_organic_carbon.text(), self.dlg.lineEdit_bulk_density.text(),os.path.join(self.dlg.lineEdit_outputdir.text(), 'k_factor_data') )
            #
            # organic_matter_content_raster = check_and_convert_raster_crs(vec_ds.crs().toWkt(),organic_matter_content_raster, os.path.join( self.dlg.lineEdit_outputdir.text(),'k_factor_data'),'organic_matter_content_reprojected.tif')
            #
            # soil_structure_class_raster, textural_class_raster = compute_soil_structure_class_map(mean_silt_content_raster, mean_sand_content_raster, mean_clay_content_raster,os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                   'k_factor_data') )
            #
            # permeability_class_raster = compute_permeability_class_map(mean_clay_content_raster, mean_silt_content_raster, os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                   'k_factor_data') )
            #
            # k_factor_raster = compute_k_factor_map(textural_factor_map = textural_factor_raster,
            #                                        organic_matter_content_map = organic_matter_content_raster,
            #                                        soil_structure_class_map = soil_structure_class_raster,
            #                                        permeability_class_map = permeability_class_raster ,
            #                                        raster_for_dimensions= landuse_raster,
            #                                        study_area_boundary = self.dlg.lineEdit_extent.text(),
            #                                        outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(), 'rusle_data'))
            #
            #
            # weight_raster = compute_weight_raster(active_soil_conservation_raster, weight_protected = 0.1 , weight_unprotected = 1,outputdir = os.path.join(self.dlg.lineEdit_outputdir.text(),'conservation_data') )
            # weighted_flow_accumulation = compute_slopelimited_flow_accumulation(dem_filled_sinks, weight_raster, os.path.join(self.dlg.lineEdit_outputdir.text(),'watershed_data'))
            # ls_factor_map = compute_ls_factor_map(dem_filled_sinks, active_soil_conservation_raster, slope_degrees,  flow_path_length ,study_area_boundary = self.dlg.lineEdit_extent.text(), outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(), 'rusle_data'))
            #
            #

            #c_factor_map = compute_c_factor_map(landuse_raster,study_area_boundary = self.dlg.lineEdit_extent.text(), outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(), 'rusle_data'))
            #
            # #active_soil_conservation_raster = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\active_soil_protection.tif"
            # active_soil_conservation_raster = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Output Enerata\tests\almost_no_protection_raster.tif"
            # #active_soil_conservation_raster = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Output Enerata\conservation_data\complete_protection.tif"
            #
            # barrier_raster = compute_barrier_raster(active_soil_conservation_raster, value_protected=1,
            #                                         value_unprotected=0,
            #                                         outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(),
            #                                                                'conservation_data'), name = "protection_active_boolean.tif")
            #
            # p_factor_map = compute_p_factor_map(landuse_raster, barrier_raster,study_area_boundary = self.dlg.lineEdit_extent.text(), outputdir=os.path.join(self.dlg.lineEdit_outputdir.text(), 'rusle_data'))
            #
            #rusle_map = compute_rusle(r_factor_raster, k_factor_raster, ls_factor_map, c_factor_map, p_factor_map, os.path.join(self.dlg.lineEdit_outputdir.text(), 'rusle_data'))
            #labour_requirement_map = compute_labour_requirements_per_ha(slope_percent, study_area_boundary= self.dlg.lineEdit_extent.text(), outputdir = os.path.join(self.dlg.lineEdit_outputdir.text(),'labour_requirement_data'), swc_measure = "Bench terraces")

            # computing random realizations
            nan_value = 32767
            # neighborhood of cell used for computing the moving average
            filter_range = 4
            nr_realizations = 100

            # normal realizations: bulk density,

            # realizations for bulk density
            #bulk_density_mean_np = read_tif_as_numpy(self.dlg.lineEdit_bulk_density.text())
            #bulk_density_uncertainty_np = read_tif_as_numpy(self.dlg.lineEdit_bulk_densityUncertainty.text())
            # realizations_bulk_density_np = moving_average_realization(bulk_density_mean_np, bulk_density_uncertainty_np,
            #                                              nr_realizations,
            #                                              filter_range, nan_value, lower_cutoff_value=0)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\bulk_density.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_bulk_density_np, f)

            # organic_carbon_mean_np = read_tif_as_numpy(self.dlg.lineEdit_organic_carbon.text())
            # organic_carbon_uncertainty_np = read_tif_as_numpy(self.dlg.lineEdit_organic_carbonUncertainty.text())
            # realizations_organic_carbon_np = moving_average_realization(organic_carbon_mean_np, organic_carbon_uncertainty_np,
            #                                              nr_realizations,
            #                                              filter_range, nan_value, lower_cutoff_value=0)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\organic_carbon.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_organic_carbon_np, f)

            # silt_mean_np = read_tif_as_numpy(self.dlg.lineEdit_silt.text())
            # silt_uncertainty_np = read_tif_as_numpy(self.dlg.lineEdit_siltUncertainty.text())
            # realizations_silt_np = moving_average_realization(silt_mean_np, silt_uncertainty_np,
            #                                              nr_realizations,
            #                                              filter_range, nan_value, lower_cutoff_value=0, upper_cutoff_value= 0.1)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\silt.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_silt_np, f)
            #
            # sand_mean_np = read_tif_as_numpy(self.dlg.lineEdit_sand.text())
            # sand_uncertainty_np = read_tif_as_numpy(self.dlg.lineEdit_sandUncertainty.text())
            # realizations_sand_np = moving_average_realization(sand_mean_np, sand_uncertainty_np,
            #                                                   nr_realizations,
            #                                                   filter_range, nan_value, lower_cutoff_value=0,
            #                                                   upper_cutoff_value=0.1)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\sand.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_sand_np, f)
            #
            # clay_mean_np = read_tif_as_numpy(self.dlg.lineEdit_clay.text())
            # clay_uncertainty_np = read_tif_as_numpy(self.dlg.lineEdit_clayUncertainty.text())
            # realizations_clay_np = moving_average_realization(clay_mean_np, clay_uncertainty_np,
            #                                                   nr_realizations,
            #                                                   filter_range, nan_value, lower_cutoff_value=0,
            #                                                   upper_cutoff_value=0.1)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\clay.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_clay_np, f)
            

            # with open(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\bulk_density.pkl', "rb") as f:
            #     realizations_bulk_density_np = pickle.load(f)
            #
            # with open(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\organic_carbon.pkl', "rb") as f:
            #     realizations_organic_carbon = pickle.load(f)
            
            # with open(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\silt.pkl', "rb") as f:
            #     realizations_silt_np = pickle.load(f)
            #
            # with open(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\sand.pkl', "rb") as f:
            #     realizations_sand_np = pickle.load(f)
            #
            # with open(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\clay.pkl', "rb") as f:
            #     realizations_clay_np = pickle.load(f)

            # realizations_silt_np, realizations_sand_np, realizations_clay_np = percentage_based_group_realization(
            #     realizations_silt_np, realizations_sand_np, realizations_clay_np, 100, 32767)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\silt_rescaled.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_silt_np, f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\sand_rescaled.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_sand_np, f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\clay_rescaled.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_clay_np, f)

            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\silt_rescaled.pkl',
            #         "rb") as f:
            #     realizations_silt_np = pickle.load(f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\sand_rescaled.pkl',
            #         "rb") as f:
            #     realizations_sand_np = pickle.load(f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\clay_rescaled.pkl',
            #         "rb") as f:
            #     realizations_clay_np = pickle.load(f)


            # compute k-factor rasters from realizations under uncertainty
            gt_and_wkt = get_geotransform_context_from_raster(mean_silt_content_raster)
            # compute_k_factor_map_set_under_uncertainty(realizations_clay_np, realizations_silt_np,
            #                                            realizations_sand_np,
            #                                            realizations_organic_carbon, realizations_bulk_density_np,
            #                                            100,
            #                                            study_area_boundary= self.dlg.lineEdit_extent.text(),raster_for_dimensions= dem, geotransform=gt_and_wkt,
            #                                            outputdir=r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\k_factor_maps_from_simulated_surfaces',
            #                                            random_state=None)
            #directory_with_precipitation_data = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\simulated_precipitation_cond_simulation"
            directory_with_precipitation_data = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\simulated_precipitation_cond_simulation"
            #compute_r_factor_map_set_under_uncertainty(directory_with_precipitation_data,study_area_boundary= self.dlg.lineEdit_extent.text(),
            #                                         outputdir = r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\r_factor_maps_from_simulated_surfaces')

            # directory_with_precipitation_data = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\simulated_precipitation_cond_simulation"
            # compute_r_factor_map_set_under_uncertainty(directory_with_precipitation_data,
            #                                            study_area_boundary=self.dlg.lineEdit_extent.text(),
            #                                            outputdir=r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\r_factor_maps_from_simulated_surfaces')
            #

            # compute_labour_requirements_set_under_uncertainty(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\k_factor_maps_from_simulated_surfaces",
            #                                                   slope_percent,dem,
            #                                                   self.dlg.lineEdit_extent.text(), 100,
            #                                                   outputdir=r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Enerata\Input Enerata\random_realizations\stability_maps_from_simulated_surfaces',rescaled_silt_clay_sand=True)

            ###Optimization

            run_optimization()


            ###### for gumobila study area #######
            nan_value = 32767
            # neighborhood of cell used for computing the moving average
            filter_range = 4
            nr_realizations = 50


            # normal realizations: bulk density,

            # realizations for bulk density
            # bulk_density_mean_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\bulk_density_5_15cm_mean.tif")
            # bulk_density_uncertainty_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\bulk_density_5_15cm_uncertainty.tif")
            # realizations_bulk_density_np = moving_average_realization(bulk_density_mean_np, bulk_density_uncertainty_np,
            #                                              nr_realizations,
            #                                              filter_range, nan_value, lower_cutoff_value=0)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\bulk_density.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_bulk_density_np, f)
            #
            # organic_carbon_mean_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\soil_organic_carbon_density_5_15cm_mean.tif")
            # organic_carbon_uncertainty_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\soil_organic_carbon_density_5_15cm_uncertainty.tif")
            # realizations_organic_carbon_np = moving_average_realization(organic_carbon_mean_np, organic_carbon_uncertainty_np,
            #                                              nr_realizations,
            #                                              filter_range, nan_value, lower_cutoff_value=0)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\organic_carbon.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_organic_carbon_np, f)
            #
            # silt_mean_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\silt_5_15cm_mean.tif")
            # silt_uncertainty_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\silt_5_15cm_uncertainty.tif")
            # realizations_silt_np = moving_average_realization(silt_mean_np, silt_uncertainty_np,
            #                                              nr_realizations,
            #                                              filter_range, nan_value, lower_cutoff_value=0, upper_cutoff_value= 0.1)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\silt.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_silt_np, f)
            #
            # sand_mean_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\sand_5_15cm_mean.tif")
            # sand_uncertainty_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\sand_5_15cm_uncertainty.tif")
            # realizations_sand_np = moving_average_realization(sand_mean_np, sand_uncertainty_np,
            #                                                   nr_realizations,
            #                                                   filter_range, nan_value, lower_cutoff_value=0,
            #                                                   upper_cutoff_value=0.1)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\sand.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_sand_np, f)
            #
            # clay_mean_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\clay_5_15cm_mean.tif")
            # clay_uncertainty_np = read_tif_as_numpy(r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\soil_data\clay_5_15cm_uncertainty.tif")
            # realizations_clay_np = moving_average_realization(clay_mean_np, clay_uncertainty_np,
            #                                                   nr_realizations,
            #                                                   filter_range, nan_value, lower_cutoff_value=0,
            #                                                   upper_cutoff_value=0.1)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\clay.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_clay_np, f)
            #

            #
            # with open(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\silt.pkl', "rb") as f:
            #     realizations_silt_np = pickle.load(f)
            #
            # with open(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\sand.pkl', "rb") as f:
            #     realizations_sand_np = pickle.load(f)
            #
            # with open(r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\clay.pkl', "rb") as f:
            #     realizations_clay_np = pickle.load(f)
            #
            # realizations_silt_np, realizations_sand_np, realizations_clay_np = percentage_based_group_realization(
            #     realizations_silt_np, realizations_sand_np, realizations_clay_np, nr_realizations, 32767)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\silt_rescaled.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_silt_np, f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\sand_rescaled.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_sand_np, f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\clay_rescaled.pkl',
            #         'wb') as f:
            #     pickle.dump(realizations_clay_np, f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\silt_rescaled.pkl',
            #         "rb") as f:
            #     realizations_silt_np = pickle.load(f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\sand_rescaled.pkl',
            #         "rb") as f:
            #     realizations_sand_np = pickle.load(f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\clay_rescaled.pkl',
            #         "rb") as f:
            #     realizations_clay_np = pickle.load(f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\bulk_density.pkl',
            #         "rb") as f:
            #     realizations_bulk_density_np = pickle.load(f)
            #
            # with open(
            #         r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\organic_carbon.pkl',
            #         "rb") as f:
            #     realizations_organic_carbon = pickle.load(f)
            # #
            # # #compute k-factor rasters from realizations under uncertainty
            # #
            # dimension_raster = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\dimsension_raster_soil_data.tif"
            # dem = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\DEM_Gumobila2.tif"
            # slope_percent =r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\elevation_data\Slope_percent_clipped.tif"
            # gt_and_wkt = get_geotransform_context_from_raster(dimension_raster)
            # extent = r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\study_area_gumobila.shp"
            # k_factor_maps_dir = r'C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\k_factor_maps_from_simulated_surfaces'
            # compute_k_factor_map_set_under_uncertainty(realizations_clay_np, realizations_silt_np,
            #                                            realizations_sand_np,
            #                                            realizations_organic_carbon, realizations_bulk_density_np,
            #                                            nr_realizations,
            #                                            study_area_boundary= extent,raster_for_dimensions= dem, geotransform=gt_and_wkt,
            #                                            outputdir=k_factor_maps_dir,
            #                                            random_state=None)
            #
            # compute_labour_requirements_set_under_uncertainty(k_factor_maps_dir,
            #                                                  slope_percent,dem,
            #                                                  extent, nr_realizations,
            #                                                  outputdir=r"C:\Users\morit\OneDrive - Universität Münster\PhD\Kooperation_GIZ\Data\Optimization_Gumobila\Input Gumobila\random_realizations\stability_maps_from_simulated_surfaces",
            #                                                  rescaled_silt_clay_sand=False)

